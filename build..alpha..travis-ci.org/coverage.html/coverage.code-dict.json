{"/home/travis/build/npmtest/node-npmtest-pm2-logrotate/test.js":"/* istanbul instrument in package npmtest_pm2_logrotate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-logrotate/lib.npmtest_pm2_logrotate.js":"/* istanbul instrument in package npmtest_pm2_logrotate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pm2_logrotate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pm2_logrotate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-logrotate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pm2-logrotate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pm2_logrotate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pm2_logrotate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pm2_logrotate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pm2_logrotate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pm2_logrotate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pm2_logrotate.__dirname + '/lib.npmtest_pm2_logrotate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pm2-logrotate/node_modules/pm2-logrotate/app.js":"var fs      \t= require('fs');\nvar path    \t= require('path');\nvar pmx     \t= require('pmx');\nvar pm2     \t= require('pm2');\nvar moment  \t= require('moment-timezone');\nvar scheduler\t= require('node-schedule');\nvar zlib      = require('zlib');\n\nvar conf = pmx.initModule({\n  widget : {\n    type             : 'generic',\n    logo             : 'https://raw.githubusercontent.com/pm2-hive/pm2-logrotate/master/pres/logo.png',\n    theme            : ['#111111', '#1B2228', '#31C2F1', '#807C7C'],\n    el : {\n      probes  : false,\n      actions : false\n    },\n    block : {\n      issues  : true,\n      cpu: true,\n      mem: true,\n      actions : true,\n      main_probes : ['Global logs size', 'Files count']\n    }\n  }\n});\n\nvar PM2_ROOT_PATH = '';\nvar Probe = pmx.probe();\n\nif (process.env.PM2_HOME)\n  PM2_ROOT_PATH = process.env.PM2_HOME;\nelse if (process.env.HOME && !process.env.HOMEPATH)\n  PM2_ROOT_PATH = path.resolve(process.env.HOME, '.pm2');\nelse if (process.env.HOME || process.env.HOMEPATH)\n  PM2_ROOT_PATH = path.resolve(process.env.HOMEDRIVE, process.env.HOME || process.env.HOMEPATH, '.pm2');\n\nvar WORKER_INTERVAL = isNaN(parseInt(conf.workerInterval)) ? 30 * 1000 : \n                            parseInt(conf.workerInterval) * 1000; // default: 30 secs\nvar SIZE_LIMIT = get_limit_size(); // default : 10MB\nvar ROTATE_CRON = conf.rotateInterval || \"0 0 * * *\"; // default : every day at midnight\nvar RETAIN = isNaN(parseInt(conf.retain)) ? undefined : parseInt(conf.retain); // All\nconsole.log(RETAIN);\nvar COMPRESSION = JSON.parse(conf.compress) || false; // Do not compress by default\nvar DATE_FORMAT = conf.dateFormat || 'YYYY-MM-DD_HH-mm-ss';\nvar ROTATE_MODULE = JSON.parse(conf.rotateModule) || true;\nvar WATCHED_FILES = [];\n\nfunction get_limit_size() {\n  if (conf.max_size == '')\n    return (1024 * 1024 * 10);\n  if (typeof(conf.max_size) !== 'string')\n      conf.max_size = conf.max_size + \"\";\n  if (conf.max_size.slice(-1) === 'G')\n    return (parseInt(conf.max_size) * 1024 * 1024 * 1024);\n  if (conf.max_size.slice(-1) === 'M')\n    return (parseInt(conf.max_size) * 1024 * 1024);\n  if (conf.max_size.slice(-1) === 'K')\n    return (parseInt(conf.max_size) * 1024);\n  return parseInt(conf.max_size);\n}\n\nfunction delete_old(file) {\n  if (file == \"/dev/null\") return;\n  var fileBaseName = file.substr(0, file.length - 4).split('/').pop() + \"__\";\n  var dirName = path.dirname(file);\n\n  fs.readdir(dirName, function(err, files) {\n    if (err) return pmx.notify(err);\n\n    var rotated_files = []\n    for (var i = 0, len = files.length; i < len; i++) {\n      if (files[i].indexOf(fileBaseName) >= 0)\n        rotated_files.push(files[i]);\n    }\n    rotated_files.sort().reverse();\n\n    for (var i = rotated_files.length - 1; i >= 0; i--) {\n      if (RETAIN > i) return ;\n\n      fs.unlink(path.resolve(dirName, rotated_files[i]), function (err) {\n        if (err) return console.error(err);\n        console.log('\"' + rotated_files[i] + '\" has been deleted');\n      });\n    };\n  });\n}\n\nfunction proceed(file) {\n  var final_name = file.substr(0, file.length - 4) + '__'\n    + moment().format(DATE_FORMAT) + '.log';\n  // if compression is enabled, add gz extention and create a gzip instance\n  if (COMPRESSION) {\n    var GZIP = zlib.createGzip({ level: zlib.Z_BEST_COMPRESSION, memLevel: zlib.Z_BEST_COMPRESSION });\n    final_name += \".gz\";\n  }\n\n  // create our read/write streams\n\tvar readStream = fs.createReadStream(file);\n\tvar writeStream = fs.createWriteStream(final_name, {'flags': 'w+'});\n\n  // pipe all stream\n  if (COMPRESSION)\n    readStream.pipe(GZIP).pipe(writeStream);\n  else \n    readStream.pipe(writeStream);\n  \n\n  // listen for error\n\treadStream.on('error', pmx.notify);\n  writeStream.on('error', pmx.notify);\n  if (COMPRESSION)\n    GZIP.on('error', pmx.notify);\n\n // when the read is done, empty the file and check for retain option\n\treadStream.on('end', function() {\n\t\tfs.truncate(file, function (err) {\n      if (err) return pmx.notify(err);\n      console.log('\"' + final_name + '\" has been created');\n\n      if (typeof(RETAIN) === 'number') \n        delete_old(file);\n    });\n\t});\n}\n\nfunction proceed_file(file, force) {\n  if (!fs.existsSync(file)) return;\n  \n  WATCHED_FILES.push(file);\n\n  fs.stat(file, function (err, data) {\n    if (err) return console.error(err);\n\n    if (data.size > 0 && (data.size >= SIZE_LIMIT || force)) \n      proceed(file);\n  });\n}\n\nfunction proceed_app(app, force) {\n  // Check all log path\n  proceed_file(app.pm2_env.pm_out_log_path, force);\n  proceed_file(app.pm2_env.pm_err_log_path, force);\n  proceed_file(app.pm2_env.pm_log_path, force);\n}\n\n// Connect to local PM2\npm2.connect(function(err) {\n  if (err) return console.error(err.stack || err);\n\n  // start background task\n  setInterval(function() {\n    // get list of process managed by pm2\n    pm2.list(function(err, apps) {\n      if (err) return console.error(err.stack || err);\n\n      // rotate log that are bigger than the limit\n      apps.forEach(function(app) {\n          // if its a module and the rotate of module is disabled, ignore\n          if (typeof(app.pm2_env.axm_options.isModule) !== 'undefined' && !ROTATE_MODULE) return ;\n          \n          proceed_app(app, false);\n      });\n    });\n\n    // rotate pm2 log\n    proceed_file(PM2_ROOT_PATH + '/pm2.log', false);\n    proceed_file(PM2_ROOT_PATH + '/agent.log', false);\n  }, WORKER_INTERVAL);\n\n  // register the cron to force rotate file\n  scheduler.scheduleJob(ROTATE_CRON, function () {\n    // get list of process managed by pm2\n    pm2.list(function(err, apps) {\n        if (err) return console.error(err.stack || err);\n\n        // force rotate for each app\n        apps.forEach(function(app) {\n          // if its a module and the rotate of module is disabled, ignore\n          if (typeof(app.pm2_env.axm_options.isModule) !== 'undefined' && !ROTATE_MODULE) return ;\n\n          proceed_app(app, true);\n        });\n      });\n  });\n})\n\n/**  ACTION PMX **/\npmx.action('list watched logs', function(reply) {\n  var returned = {};\n  WATCHED_FILES.forEach(function (file) {\n        returned[file] = (fs.statSync(file).size);\n  });\n  return reply(returned);\n});\n\npmx.action('list all logs', function(reply) {\n  var returned = {};\n  var folder = PM2_ROOT_PATH + \"/logs\";\n  fs.readdir(folder, function (err, files) {\n      if (err) {\n        console.error(err.stack || err);\n        return reply(0)\n      }\n\n      files.forEach(function (file) {\n        returned[file] = (fs.statSync(folder + \"/\" + file).size);\n      });\n      return reply(returned);\n  });\n});\n\n/** PROB PMX **/\nvar metrics = {};\nmetrics.totalsize = Probe.metric({\n    name  : 'Global logs size',\n    value : 'N/A'\n});\n\nmetrics.totalcount = Probe.metric({\n    name  : 'Files count',\n    value : 'N/A'\n});\n\n// update folder size of logs every 10secs\nfunction updateFolderSizeProbe() {\n  var returned = 0;\n  var folder = PM2_ROOT_PATH + \"/logs\";\n  fs.readdir(folder, function (err, files) {\n    if (err) {\n         console.error(err.stack || err);\n         return metrics.totalsize.set(\"N/A\");\n    }\n\n    files.forEach(function (file, idx, arr) {\n       returned += fs.statSync(folder + \"/\" + file).size;\n    });\n\n    metrics.totalsize.set(handleUnit(returned, 2));\n  });\n}\nupdateFolderSizeProbe();\nsetInterval(updateFolderSizeProbe, 30000);\n\n// update file count every 10secs\nfunction updateFileCountProbe() {\n  fs.readdir(PM2_ROOT_PATH + \"/logs\", function (err, files) {\n      if (err) {\n        console.error(err.stack || err);\n        return metrics.totalcount.set(0);\n      }\n\n      return  metrics.totalcount.set(files.length);\n  });\n}\nupdateFileCountProbe();\nsetInterval(updateFileCountProbe, 30000);\n\nfunction handleUnit(bytes, precision) {\n  var kilobyte = 1024;\n  var megabyte = kilobyte * 1024;\n  var gigabyte = megabyte * 1024;\n  var terabyte = gigabyte * 1024;\n\n  if ((bytes >= 0) && (bytes < kilobyte)) {\n    return bytes + ' B';\n  } else if ((bytes >= kilobyte) && (bytes < megabyte)) {\n    return (bytes / kilobyte).toFixed(precision) + ' KB';\n  } else if ((bytes >= megabyte) && (bytes < gigabyte)) {\n    return (bytes / megabyte).toFixed(precision) + ' MB';\n  } else if ((bytes >= gigabyte) && (bytes < terabyte)) {\n    return (bytes / gigabyte).toFixed(precision) + ' GB';\n  } else if (bytes >= terabyte) {\n    return (bytes / terabyte).toFixed(precision) + ' TB';\n  } else {\n    return bytes + ' B';\n  }\n};\n"}